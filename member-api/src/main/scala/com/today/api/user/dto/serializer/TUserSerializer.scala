 package com.today.api.user.dto.serializer

import com.today.api.user.dto.serializer._;import com.today.api.user.request.serializer._;import com.today.api.user.response.serializer._;import com.today.api.page.serializer._;
        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        class TUserSerializer extends TCommonBeanSerializer[com.today.api.user.dto.TUser]{
          
      @throws[TException]
      override def read(iprot: TProtocol): com.today.api.user.dto.TUser = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var id: Int = 0
        var userName: String = null
        var password: String = null
        var telephone: String = null
        var email: String = null
        var qq: String = null
        var integral: Int = 0
        var createdAt: Long = 0
        var createdBy: Int = 0
        var updatedAt: Long = 0
        var updatedBy: Int = 0
        var remark: String = null
        var userStatus: String = null
        var isDeleted: String = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => id = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 2 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => userName = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 3 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => password = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 4 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => telephone = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 5 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => email = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 6 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => qq = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 7 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => integral = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 8 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I64 => createdAt = iprot.readI64
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 9 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => createdBy = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 10 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I64 => updatedAt = iprot.readI64
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 11 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => updatedBy = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 12 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => remark = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 13 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => userStatus = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 14 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => isDeleted = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = com.today.api.user.dto.TUser(id = id,userName = userName,password = password,telephone = telephone,email = email,qq = qq,integral = integral,createdAt = createdAt,createdBy = createdBy,updatedAt = updatedAt,updatedBy = updatedBy,remark = remark,userStatus = userStatus,isDeleted = isDeleted)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: com.today.api.user.dto.TUser, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("TUser"))

      
            {
            val elem0 = bean.id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, 1.asInstanceOf[Short]))
            oprot.writeI32(elem0)
            oprot.writeFieldEnd
            
            }
            {
            val elem1 = bean.userName 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("userName", com.isuwang.org.apache.thrift.protocol.TType.STRING, 2.asInstanceOf[Short]))
            oprot.writeString(elem1)
            oprot.writeFieldEnd
            
            }
            {
            val elem2 = bean.password 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("password", com.isuwang.org.apache.thrift.protocol.TType.STRING, 3.asInstanceOf[Short]))
            oprot.writeString(elem2)
            oprot.writeFieldEnd
            
            }
            {
            val elem3 = bean.telephone 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("telephone", com.isuwang.org.apache.thrift.protocol.TType.STRING, 4.asInstanceOf[Short]))
            oprot.writeString(elem3)
            oprot.writeFieldEnd
            
            }
            {
            val elem4 = bean.email 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("email", com.isuwang.org.apache.thrift.protocol.TType.STRING, 5.asInstanceOf[Short]))
            oprot.writeString(elem4)
            oprot.writeFieldEnd
            
            }
            {
            val elem5 = bean.qq 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("qq", com.isuwang.org.apache.thrift.protocol.TType.STRING, 6.asInstanceOf[Short]))
            oprot.writeString(elem5)
            oprot.writeFieldEnd
            
            }
            {
            val elem6 = bean.integral 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("integral", com.isuwang.org.apache.thrift.protocol.TType.I32, 7.asInstanceOf[Short]))
            oprot.writeI32(elem6)
            oprot.writeFieldEnd
            
            }
            {
            val elem7 = bean.createdAt 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdAt", com.isuwang.org.apache.thrift.protocol.TType.I64, 8.asInstanceOf[Short]))
            oprot.writeI64(elem7)
            oprot.writeFieldEnd
            
            }
            {
            val elem8 = bean.createdBy 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdBy", com.isuwang.org.apache.thrift.protocol.TType.I32, 9.asInstanceOf[Short]))
            oprot.writeI32(elem8)
            oprot.writeFieldEnd
            
            }
            {
            val elem9 = bean.updatedAt 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedAt", com.isuwang.org.apache.thrift.protocol.TType.I64, 10.asInstanceOf[Short]))
            oprot.writeI64(elem9)
            oprot.writeFieldEnd
            
            }
            {
            val elem10 = bean.updatedBy 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedBy", com.isuwang.org.apache.thrift.protocol.TType.I32, 11.asInstanceOf[Short]))
            oprot.writeI32(elem10)
            oprot.writeFieldEnd
            
            }
            {
            val elem11 = bean.remark 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("remark", com.isuwang.org.apache.thrift.protocol.TType.STRING, 12.asInstanceOf[Short]))
            oprot.writeString(elem11)
            oprot.writeFieldEnd
            
            }
            {
            val elem12 = bean.userStatus 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("userStatus", com.isuwang.org.apache.thrift.protocol.TType.STRING, 13.asInstanceOf[Short]))
            oprot.writeString(elem12)
            oprot.writeFieldEnd
            
            }
            {
            val elem13 = bean.isDeleted 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("isDeleted", com.isuwang.org.apache.thrift.protocol.TType.STRING, 14.asInstanceOf[Short]))
            oprot.writeString(elem13)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: com.today.api.user.dto.TUser): Unit = {
      
              if(bean.userName == null)
              throw new SoaException(SoaBaseCode.NotNull, "userName字段不允许为空")
            
              if(bean.password == null)
              throw new SoaException(SoaBaseCode.NotNull, "password字段不允许为空")
            
              if(bean.telephone == null)
              throw new SoaException(SoaBaseCode.NotNull, "telephone字段不允许为空")
            
              if(bean.email == null)
              throw new SoaException(SoaBaseCode.NotNull, "email字段不允许为空")
            
              if(bean.qq == null)
              throw new SoaException(SoaBaseCode.NotNull, "qq字段不允许为空")
            
              if(bean.remark == null)
              throw new SoaException(SoaBaseCode.NotNull, "remark字段不允许为空")
            
              if(bean.userStatus == null)
              throw new SoaException(SoaBaseCode.NotNull, "userStatus字段不允许为空")
            
              if(bean.isDeleted == null)
              throw new SoaException(SoaBaseCode.NotNull, "isDeleted字段不允许为空")
            
    }
    

          @throws[TException]
          override def toString(bean: com.today.api.user.dto.TUser): String = if (bean == null) "null" else bean.toString

        }
        
      