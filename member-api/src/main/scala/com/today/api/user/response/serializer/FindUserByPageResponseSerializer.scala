 package com.today.api.user.response.serializer

import com.today.api.user.dto.serializer._;import com.today.api.user.request.serializer._;import com.today.api.user.response.serializer._;import com.today.api.page.serializer._;
        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        class FindUserByPageResponseSerializer extends TCommonBeanSerializer[com.today.api.user.response.FindUserByPageResponse]{
          
      @throws[TException]
      override def read(iprot: TProtocol): com.today.api.user.response.FindUserByPageResponse = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var pageResponse: com.today.api.page.TPageResponse = null
        var userList: List[com.today.api.user.dto.TUser] = List.empty
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => pageResponse = new com.today.api.page.serializer.TPageResponseSerializer().read(iprot)
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 2 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.LIST => userList = {
        val _list0 : com.isuwang.org.apache.thrift.protocol.TList = iprot.readListBegin
        val _result0 = (0 until _list0.size).map(_ => {new com.today.api.user.dto.serializer.TUserSerializer().read(iprot)}).toList
        iprot.readListEnd
        _result0
        }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = com.today.api.user.response.FindUserByPageResponse(pageResponse = pageResponse,userList = userList)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: com.today.api.user.response.FindUserByPageResponse, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("FindUserByPageResponse"))

      
            {
            val elem0 = bean.pageResponse 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("pageResponse", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
             new com.today.api.page.serializer.TPageResponseSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
            {
            val elem1 = bean.userList 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("userList", com.isuwang.org.apache.thrift.protocol.TType.LIST, 2.asInstanceOf[Short]))
            
        oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem1.size))
        elem1.foreach(elem2 => { new com.today.api.user.dto.serializer.TUserSerializer().write(elem2, oprot)})
        oprot.writeListEnd
      
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: com.today.api.user.response.FindUserByPageResponse): Unit = {
      
              if(bean.pageResponse == null)
              throw new SoaException(SoaBaseCode.NotNull, "pageResponse字段不允许为空")
            
                if(bean.pageResponse != null)
                new com.today.api.page.serializer.TPageResponseSerializer().validate(bean.pageResponse)
              
              if(bean.userList == null)
              throw new SoaException(SoaBaseCode.NotNull, "userList字段不允许为空")
            
    }
    

          @throws[TException]
          override def toString(bean: com.today.api.user.response.FindUserByPageResponse): String = if (bean == null) "null" else bean.toString

        }
        
      